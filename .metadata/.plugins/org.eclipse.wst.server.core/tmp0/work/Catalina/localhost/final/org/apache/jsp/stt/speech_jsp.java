/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.69
 * Generated at: 2016-06-27 05:14:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.stt;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;
import vo.Resultdb;

public final class speech_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("  <head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n");
      out.write("    <title>Customer Analysis System</title>\n");
      out.write("    <style>\n");
      out.write("      body\n");
      out.write("      {\n");
      out.write("        max-width: 500px;\n");
      out.write("        margin: 2em auto;\n");
      out.write("        font-size: 20px;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      h1\n");
      out.write("      {\n");
      out.write("        text-align: center;\n");
      out.write("        font-family: 'Impact';\n");
      out.write("        color: #E95D3C;\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("      h3\n");
      out.write("      {\n");
      out.write("      \tfont-family: Arial Narrow;\n");
      out.write("      \tcolor: #EDA900;\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("       span\n");
      out.write("      {\n");
      out.write("      \tfont-family: 'Impact';    \t\n");
      out.write("      \tcolor: #E95D3C;\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("\n");
      out.write("      .buttons-wrapper\n");
      out.write("      {\n");
      out.write("        text-align: center;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      .hidden\n");
      out.write("      {\n");
      out.write("        display: none;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      #transcription,\n");
      out.write("      #log\n");
      out.write("      {\n");
      out.write("        display: block;\n");
      out.write("        width: 100%;\n");
      out.write("        height: 7em;\n");
      out.write("        overflow-y: scroll;\n");
      out.write("        border: 1px solid #333333;\n");
      out.write("        line-height: 1.3em;\n");
      out.write("      }\n");
      out.write("\n");
      out.write("      .button-demo\n");
      out.write("      {\n");
      out.write("        padding: 0.5em;\n");
      out.write("        display: inline-block;\n");
      out.write("        margin: 1em auto;\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("    input[type='radio'] {\n");
      out.write("    \t-webkit-appearance:none;\n");
      out.write("    \twidth:20px;\n");
      out.write("    \theight:20px;\n");
      out.write("    \tborder:1px solid darkgray;\n");
      out.write("    \tborder-radius:50%;\n");
      out.write("    \toutline:none;\n");
      out.write("    \tbox-shadow:0 0 5px 0px gray inset;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tinput[type='radio']:hover {\n");
      out.write("    \tbox-shadow:0 0 5px 0px orange inset;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tinput[type='radio']:before {\n");
      out.write("    \tcontent:'';\n");
      out.write("    \tdisplay:block;\n");
      out.write("    \twidth:60%;\n");
      out.write("    \theight:60%;\n");
      out.write("    \tmargin: 20% auto;    \n");
      out.write("    \tborder-radius:50%;    \n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tinput[type='radio']:checked:before {\n");
      out.write("    \tbackground: #E95D3C;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tlabel {\n");
      out.write("\t\tfont-family: 'MS Sans Serif'; \n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t.button-demo {\n");
      out.write("\t\tbackground: #E95D3C;\n");
      out.write("    \tcolor: #fff;\n");
      out.write("    \tfont-family: Lucida Console;\n");
      out.write("    \tfont-size: 15px;\n");
      out.write("    \theight: 40px;\n");
      out.write("    \twidth: 100px;\n");
      out.write("    \tline-height: 25px;\n");
      out.write("    \tmargin: 25px 25px;\n");
      out.write("    \ttext-align: center;\n");
      out.write("    \tborder: 0;\n");
      out.write("    \ttransition: all 0.3s ease 0s;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\t.button-demo:hover {\n");
      out.write(" \t\t background: #EDA900\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t#anly {\n");
      out.write("\t\tbackground: #EDA900;\n");
      out.write("    \tcolor: #fff;\n");
      out.write("    \tfont-family: Lucida Console;\n");
      out.write("    \tfont-size: 15px;\n");
      out.write("    \theight: 40px;\n");
      out.write("    \twidth: 100px;\n");
      out.write("    \tline-height: 25px;\n");
      out.write("    \tmargin: 25px 25px;\n");
      out.write("    \ttext-align: center;\n");
      out.write("    \tborder: 0;\n");
      out.write("    \ttransition: all 0.3s ease 0s;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t#anly:hover {\n");
      out.write(" \t\t background: #E95D3C\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("    </style>\n");
      out.write("  </head>\n");
      out.write("  <body>\n");
      out.write("    <h1>Customer Analysis System</h1>\n");
      out.write("    <h3>Customer consultation</h3>\n");
      out.write("    <textarea id=\"transcription\" readonly=\"readonly\"></textarea>\n");
      out.write("\n");
      out.write("    <span> RESULTS:</span>\n");
      out.write("    <label><input type=\"radio\" name=\"recognition-type\" value=\"final\" checked=\"checked\" /> Final only</label>\n");
      out.write("    <label><input type=\"radio\" name=\"recognition-type\" value=\"interim\" /> Interim</label>\n");
      out.write("\n");
      out.write("    <h3>Connection</h3>\n");
      out.write("    <div id=\"log\"></div>\n");
      out.write("\n");
      out.write("    <div class=\"buttons-wrapper\">\n");
      out.write("      <button id=\"button-play-ws\" class=\"button-demo\">Play</button>\n");
      out.write("      <button id=\"button-stop-ws\" class=\"button-demo\">Stop</button>\n");
      out.write("      <button id=\"clear-all\" class=\"button-demo\">Clear all</button>\n");
      out.write("      <form action=\"start.jsp\" method=\"GET\">\n");
      out.write("      \t<input id=\"anly\" type=\"submit\" value=\"형태소 분석\">\n");
      out.write("      </form>\n");
      out.write("    </div>\n");
      out.write("    <span id=\"ws-unsupported\" class=\"hidden\"></span>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("      // Test browser support\n");
      out.write("      window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || null;\n");
      out.write("\n");
      out.write("      if (window.SpeechRecognition === null) \n");
      out.write("      {\n");
      out.write("        document.getElementById('ws-unsupported').classList.remove('hidden');\n");
      out.write("        document.getElementById('button-play-ws').setAttribute('disabled', 'disabled');\n");
      out.write("        document.getElementById('button-stop-ws').setAttribute('disabled', 'disabled');\n");
      out.write("      } \n");
      out.write("      else \n");
      out.write("      {\n");
      out.write("        var recognizer = new window.SpeechRecognition();\n");
      out.write("        var transcription = document.getElementById('transcription'); //결과 받아올 변수\n");
      out.write("        var log = document.getElementById('log');\n");
      out.write("\t\t\n");
      out.write("        // 사용자가 멈출때 쓰일 인자\n");
      out.write("        recognizer.continuous = true;\n");
      out.write("\n");
      out.write("        // 인식 시작\n");
      out.write("        recognizer.onresult = function(event) \n");
      out.write("        {\n");
      out.write("          transcription.textContent = '';\n");
      out.write("\n");
      out.write("          for (var i = event.resultIndex; i < event.results.length; i++)\n");
      out.write("          {\n");
      out.write("            if (event.results[i].isFinal) //인식 끝나면 정확도까지 보여줌(Stop demo 버튼 누르면)\n");
      out.write("            {\n");
      out.write("              //현재 시간\n");
      out.write("              var now = new Date();\n");
      out.write("              var nowAll = now.getFullYear() + \"-\" + (now.getMonth() + 1) + \"-\" + now.getDate() + \" \" + now.getHours() + \":\" + now.getMinutes() + \":\" + now.getSeconds() + \" \";\n");
      out.write("              transcription.textContent = event.results[i][0].transcript + ' (Confidence: ' + event.results[i][0].confidence + ')';\n");
      out.write("              \n");
      out.write("              console.log(event.results[i][0].transcript);\n");
      out.write("             \n");
      out.write("              var xhr = new XMLHttpRequest();\n");
      out.write("              \n");
      out.write("              var a=decodeURIComponent(event.results[i][0].transcript); \n");
      out.write("              xhr.open('GET', '/final/stt/api?date='+nowAll + '&transcription=' + a + '&confidence=' + event.results[i][0].confidence, true);\n");
      out.write("              xhr.send(null); \n");
      out.write("            } \n");
      out.write("            else\n");
      out.write("            {\n");
      out.write("              transcription.textContent += event.results[i][0].transcript; //인식 결과가 계속 더해짐\n");
      out.write("            }\n");
      out.write("          }\n");
      out.write("          \n");
      out.write("        };\n");
      out.write("\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        //에러 처리\n");
      out.write("        recognizer.onerror = function(event)\n");
      out.write("        {\n");
      out.write("          log.innerHTML = 'Recognition error: ' + event.message + '<br />' + log.innerHTML;\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        document.getElementById('button-play-ws').addEventListener('click', function() \n");
      out.write("        {\n");
      out.write("          //연속적인 결과 얻을때\n");
      out.write("          recognizer.interimResults = document.querySelector('input[name=\"recognition-type\"][value=\"interim\"]').checked;\n");
      out.write("\n");
      out.write("          try \n");
      out.write("          {\n");
      out.write("            recognizer.start(); //인식 시작\n");
      out.write("            log.innerHTML = 'Recognition started' + '<br />' + log.innerHTML;\n");
      out.write("          } \n");
      out.write("          catch(ex)\n");
      out.write("          {\n");
      out.write("            log.innerHTML = 'Recognition error: ' + ex.message + '<br />' + log.innerHTML; //에러 메시지 출력\n");
      out.write("          }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        document.getElementById('button-stop-ws').addEventListener('click', function() \n");
      out.write("        {\n");
      out.write("          recognizer.stop();\n");
      out.write("          log.innerHTML = 'Recognition stopped' + '<br />' + log.innerHTML;\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        document.getElementById('clear-all').addEventListener('click', function()\n");
      out.write("        {\n");
      out.write("          transcription.textContent = '';\n");
      out.write("          log.textContent = '';\n");
      out.write("        });\n");
      out.write("      }\n");
      out.write("      \n");
      out.write("      \n");
      out.write("    </script>\n");
      out.write("  </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
